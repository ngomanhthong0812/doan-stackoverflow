/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appUsersRouteImport } from './routes/(app)/users'
import { Route as appTagsRouteImport } from './routes/(app)/tags'
import { Route as appAccountRouteImport } from './routes/(app)/account'
import { Route as appQuestionsIndexRouteImport } from './routes/(app)/questions/index'
import { Route as appQuestionsAskRouteImport } from './routes/(app)/questions/ask'
import { Route as appQuestionsIdRouteImport } from './routes/(app)/questions/$id'
import { Route as appQuestionsEditIdRouteImport } from './routes/(app)/questions/edit/$id'
import { Route as appQuestionsEditPreviewIdRouteImport } from './routes/(app)/questions/edit-preview/$id'

const appIndexRoute = appIndexRouteImport.update({
  id: '/(app)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
})
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
})
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
})
const appUsersRoute = appUsersRouteImport.update({
  id: '/(app)/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
})
const appTagsRoute = appTagsRouteImport.update({
  id: '/(app)/tags',
  path: '/tags',
  getParentRoute: () => rootRouteImport,
})
const appAccountRoute = appAccountRouteImport.update({
  id: '/(app)/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
})
const appQuestionsIndexRoute = appQuestionsIndexRouteImport.update({
  id: '/(app)/questions/',
  path: '/questions/',
  getParentRoute: () => rootRouteImport,
})
const appQuestionsAskRoute = appQuestionsAskRouteImport.update({
  id: '/(app)/questions/ask',
  path: '/questions/ask',
  getParentRoute: () => rootRouteImport,
})
const appQuestionsIdRoute = appQuestionsIdRouteImport.update({
  id: '/(app)/questions/$id',
  path: '/questions/$id',
  getParentRoute: () => rootRouteImport,
})
const appQuestionsEditIdRoute = appQuestionsEditIdRouteImport.update({
  id: '/(app)/questions/edit/$id',
  path: '/questions/edit/$id',
  getParentRoute: () => rootRouteImport,
})
const appQuestionsEditPreviewIdRoute =
  appQuestionsEditPreviewIdRouteImport.update({
    id: '/(app)/questions/edit-preview/$id',
    path: '/questions/edit-preview/$id',
    getParentRoute: () => rootRouteImport,
  })

const rootRouteChildren = {
  appAccountRoute: appAccountRoute,
  appTagsRoute: appTagsRoute,
  appUsersRoute: appUsersRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  appIndexRoute: appIndexRoute,
  appQuestionsIdRoute: appQuestionsIdRoute,
  appQuestionsAskRoute: appQuestionsAskRoute,
  appQuestionsIndexRoute: appQuestionsIndexRoute,
  appQuestionsEditPreviewIdRoute: appQuestionsEditPreviewIdRoute,
  appQuestionsEditIdRoute: appQuestionsEditIdRoute,
}
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)
